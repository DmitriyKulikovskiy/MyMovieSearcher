{"version":3,"sources":["components/SearchBar/search.jsx","components/Movie/movie.jsx","components/Movie/result.jsx","components/Movie/currentMovie.jsx","components/Header/header.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onInputChange","searchFilm","className","type","placeholder","onChange","onKeyPress","Movie","result","openCurrentMovie","onClick","imdbID","src","Poster","Title","Year","Result","response","map","key","CurrentMovie","selected","closeCurrentMovie","imdbRating","Genre","Actors","Director","Language","Awards","Runtime","BoxOffice","Plot","Header","App","useState","s","state","setState","apiURL","e","target","value","prevState","axios","then","data","Search","id","console","log","undefined","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d33addbf.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../../App.css'\r\n\r\nconst SearchBar = ({onInputChange,searchFilm}) => {\r\n    return (\r\n        <section className=\"searchbox-wrap\">\r\n            <input  type='text' \r\n                    placeholder='Search your movie...' \r\n                    onChange={onInputChange}\r\n                    className=\"searchbox\"\r\n                    onKeyPress={searchFilm}/>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from 'react'\r\nimport '../../App.css'\r\n\r\n\r\nconst Movie = ({result,openCurrentMovie}) => {\r\n    return(\r\n        <div className=\"result\" onClick={() => openCurrentMovie(result.imdbID)}>\r\n            <img  src={result.Poster} /> \r\n            <h3>{result.Title} <span>{result.Year}</span></h3> \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Movie;","import React from 'react'\r\nimport Movie from './movie'\r\nimport '../../App.css'\r\n\r\nconst Result = ({response,openCurrentMovie}) => {\r\n    if (!response) return <div className='movieError'>Movie is not found</div>\r\n    return(\r\n        <div className=\"results\">\r\n            {response.map(result => (\r\n            <Movie key={result.imdbID} result={result} openCurrentMovie={openCurrentMovie}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result;","import React from 'react'\r\nimport '../../App.css'\r\n\r\nconst CurrentMovie = ({selected, closeCurrentMovie}) => {\r\n    return(\r\n        <section className=\"popup\">\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\t<h2 className='title'>{ selected.Title } <span>({ selected.Year })</span></h2>\r\n\t\t\t\t<p className=\"rating\"><span className='i'>Rating(IMDB):</span> {selected.imdbRating}</p>\r\n\t\t\t\t<p className=\"genre\"><span className='i'>Genre:</span> {selected.Genre  }</p>\r\n\t\t\t\t<p className=\"actors\"><span className='i'>Actors:</span> {selected.Actors }</p>\r\n\t\t\t\t<p className=\"Director\"><span className='i'>Director:</span> {selected.Director }</p>\r\n\t\t\t\t<p className=\"language\"><span className='i'>Language:</span> {selected.Language }</p>\r\n\t\t\t\t<p className=\"Awards\"><span className='i'>Awards:</span> {selected.Awards }</p>\r\n\t\t\t\t<p className=\"Runtime\"><span className='i'>Runtime:</span> {selected.Runtime }</p>\r\n\t\t\t\t<p className=\"BoxOffice\"><span className='i'>BoxOffice:</span> {selected.BoxOffice }</p>\r\n\t\t\t\t\r\n\t\t\t\t<div className=\"plot\">\r\n\t\t\t\t\t<img src={selected.Poster} />\r\n\t\t\t\t\t<p> <span className='i'>About:  </span> {selected.Plot}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"close\" onClick={closeCurrentMovie}>Close</button>\r\n\t\t\t</div>\r\n\t\t</section>\r\n        \r\n    )\r\n}\r\n\r\nexport default CurrentMovie;","import React from 'react'\r\nimport '../../App.css'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n           <h1><span>IN</span>MOVIE</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar/search';\nimport axios from 'axios'\nimport Result from './components/Movie/result';\nimport CurrentMovie from './components/Movie/currentMovie';\nimport Header from './components/Header/header';\n\n\nfunction App() {\n  const [state, setState] = useState({\n    s: '',\n    response: [],\n    selected: {}\n  });\n\n  const apiURL = '//www.omdbapi.com/?apikey=73f30b51'\n\n  const searchFilm = e => {\n    if(e.key === 'Enter'){\n      axios(apiURL + \"&s=\" + state.s).then(({data}) => {\n        let response = data.Search;\n        setState(prevState => {\n          return  {...prevState, response: []},\n                  {...prevState, response: response}\n        })\n      })\n    } \n  }\n\n  const openCurrentMovie = id => {\n    axios(apiURL + \"&i=\" + id).then(({data}) => {\n\n      let response = data;\n      console.log(response)\n      setState(prevState => {\n        return {...prevState, selected: response}\n      })\n    })\n  }\n\n  const closeCurrentMovie = () => {\n    setState(prevState => {\n      return {...prevState, selected: {}}\n    })\n  }\n\n  const onInputChange = e => {\n    let s = e.target.value\n\n    setState(prevState => {\n      return {...prevState, s: s}\n    })\n  }\n\n  return (\n    <div>\n      <Header />\n      <main>\n        <SearchBar onInputChange={onInputChange} searchFilm={searchFilm}/>\n        <Result response={state.response} openCurrentMovie={openCurrentMovie}/>\n        <div className='made'>Made by Dima Kulikovskiy <span>&#169; 2020</span></div>\n\n        {state.selected.Title != undefined ? <CurrentMovie selected={state.selected} closeCurrentMovie={closeCurrentMovie}  /> : false}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( <App /> ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}